import 'package:ejemplo/login.dart';
import 'package:flutter/material.dart';
import 'package:ejemplo/sql_helper.dart';

class CrearCitaPage extends StatefulWidget {
  final int? userId;

  const CrearCitaPage({Key? key, this.userId}) : super(key: key);

  @override
  _CrearCitaPageState createState() => _CrearCitaPageState();
}

class _CrearCitaPageState extends State<CrearCitaPage> {
  TextEditingController _descripcionController = TextEditingController();
  TextEditingController _fechaController = TextEditingController();
  TextEditingController _horaController = TextEditingController();
  Future<List<Map<String, dynamic>>>? _citasFuture;

  @override
  void initState() {
    super.initState();
    _citasFuture = SQLHelper.getCitasByUserId(widget.userId!);
  }

  void _guardarCita() async {
    final descripcion = _descripcionController.text;
    final fecha = _fechaController.text;
    final hora = _horaController.text;

    await SQLHelper.saveCita(widget.userId!, descripcion, fecha, hora);
    setState(() {
      _citasFuture = SQLHelper.getCitasByUserId(widget.userId!);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Cita creada con éxito'),
      ),
    );
  }

  void _cerrarSesion() {
    // Limpiar el estado actual y navegar de vuelta a la pantalla de inicio de sesión
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => LoginPage(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Crear Cita'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller:
                  _descripcionController, // Asigna el controlador al TextField
              decoration: InputDecoration(labelText: 'Descripción'),
            ),
            TextField(
              controller:
                  _fechaController, // Asigna el controlador al TextField
              decoration: InputDecoration(labelText: 'Fecha'),
            ),
            TextField(
              controller: _horaController, // Asigna el controlador al TextField
              decoration: InputDecoration(labelText: 'Hora'),
            ),
            SizedBox(height: 20.0),
            ElevatedButton(
              onPressed: _guardarCita,
              child: Text('Guardar Cita'),
            ),
            SizedBox(height: 20.0),
            ElevatedButton(
              onPressed: _cerrarSesion,
              child: Text('Cerrar Sesión'),
            ),
            SizedBox(height: 20.0),
            // Mostrar la lista de citas
            Expanded(
              child: FutureBuilder<List<Map<String, dynamic>>>(
                future: _citasFuture,
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(child: CircularProgressIndicator());
                  } else if (snapshot.hasError) {
                    return Text('Error: ${snapshot.error}');
                  } else {
                    final citas = snapshot.data ?? [];
                    if (citas.isNotEmpty) {
                      return ListView.builder(
                        itemCount: citas.length,
                        itemBuilder: (context, index) {
                          final cita = citas[index];
                          return Card(
                            child: ListTile(
                              title:
                                  Text('Descripción: ${cita['descripcion']}'),
                              subtitle: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text('Fecha: ${cita['fecha']}'),
                                  Text('Hora: ${cita['hora']}'),
                                ],
                              ),
                            ),
                          );
                        },
                      );
                    } else {
                      return Text('No hay citas para mostrar');
                    }
                  }
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
