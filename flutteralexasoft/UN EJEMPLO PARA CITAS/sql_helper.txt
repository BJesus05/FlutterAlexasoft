import 'dart:async';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';

class SQLHelper {
  static Database? _database;

  static Future<Database> get database async {
    if (_database != null) return _database!;

    // Si la base de datos no está inicializada, inicializarla
    _database = await initDB();
    return _database!;
  }

  static Future<Database> initDB() async {
    final databasesPath = await getDatabasesPath();
    final path = join(databasesPath, 'app_database.db');

    return await openDatabase(
      path,
      version: 1,
      onCreate: (db, version) async {
        // Código para crear las tablas necesarias
        await db.execute('''
          CREATE TABLE users(
            id INTEGER PRIMARY KEY,
            username TEXT,
            password TEXT
          )
        ''');
        await db.execute('''
          CREATE TABLE citas(
            id INTEGER PRIMARY KEY,
            userId INTEGER,
            descripcion TEXT,
            fecha TEXT,
            hora TEXT
          )
        ''');
      },
    );
  }
  

  // Método para verificar las credenciales del usuario al iniciar sesión
  static Future<bool> verifyUserCredentials(String username, String password) async {
    final db = await database;
    final count = Sqflite.firstIntValue(await db.rawQuery(
        'SELECT COUNT(*) FROM users WHERE username = ? AND password = ?',
        [username, password]));
    return count == 1;
  }

  // Método para obtener el ID del usuario por nombre de usuario y contraseña
  static Future<int?> getUserId(String username, String password) async {
    final db = await database;
    final user = await db.query('users',
        columns: ['id'],
        where: 'username = ? AND password = ?',
        whereArgs: [username, password]);
    if (user.isNotEmpty) {
      return user.first['id'] as int;
    } else {
      return null;
    }
  }

  // Método para guardar una nueva cita
  static Future<void> saveCita(int userId, String descripcion, String fecha, String hora) async {
    final db = await database;
    await db.insert(
      'citas',
      {'userId': userId, 'descripcion': descripcion, 'fecha': fecha, 'hora': hora},
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }

  // Método para obtener todas las citas de un usuario
  static Future<List<Map<String, dynamic>>> getCitasByUserId(int userId) async {
    final db = await database;
    return await db.query('citas', where: 'userId = ?', whereArgs: [userId]);
  }
  static Future<bool> userExists(String username) async {
    final db = await database;
    final count = Sqflite.firstIntValue(await db.rawQuery(
      'SELECT COUNT(*) FROM users WHERE username = ?',
      [username],
    ));
    return count! > 0;
  }

  // Método para guardar un nuevo usuario en la base de datos
  static Future<void> saveUser(String username, String password) async {
    final db = await database;
    await db.insert(
      'users',
      {'username': username, 'password': password},
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }
}
